log_level: "Trace"
parallel: 1
runner:
  target_rps: 3
  duration: 2s
  batch_size: "Auto"
  # batch_size: 2
  base_url: "http://localhost:8081"
  global:
    scripts: |
        def COUNTER = 0
        def IMSI = 11000
  scenarios:
    - name: chargingDataCreate
      pre-script:
        scripts: |
          def now = now()
          def random = random(100,999)
          def IMSI = IMSI + 1
          def imsi = IMSI
      request:
        method: POST
        path: "/nchf-convergedcharging/v2/chargingdata"
        headers: 
        - content-type: "application/json"
        body: |
          {
            "notifyUri": "http://chf/callback/notify",
            "oneTimeEvent": true,
            "invocationSequenceNumber": ${COUNTER},
            "invocationTimeStamp": "${now}",
            "subscriberIdentifier": "imsi-${imsi}",
            "nfConsumerIdentification": {
              "nFIPv6Address": "2001:db8:85a3::8a2e:370:7334",
              "nFIPv4Address": "198.51.100.1",
              "nFName": "046b6c7f-0b8a-43b9-b35d-6489e6daee91",
              "nodeFunctionality": "SMF",
              "nFPLMNID": {
                "mnc": "${random}",
                "mcc": "${random}"
              }
            }
          }
        timeout: 3s
      response:
        assert:
          status: 201
        #   headers: 
        #   - name: "location"
        #     value:
        #       type: "NotNull"
        #   - name: "content-type"
        #     value:
        #       type: "Equal"
        #       value: "application/json"
        #   body:
        #   - name: "invocationSequenceNumber"
        #     value:
        #       type: "NotNull"
        # define:
        #   - name: location
        #     from: Header
        #     path: "location"
      post-script:
        scripts: |
          # assert response.invocationSequenceNumber == #notnull
          def contentTypes = responseHeaders['content-type']
          def contentType = contentTypes[0]
          assert contentType == 'application/json'
          assert responseStatus == 201
          def COUNTER = COUNTER + 1
          def locations = responseHeaders['location']
          def location = locations[0]
          def index = location.lastIndexOf('/')
          def index = index + 1
          def chargingDataRef = location.substring(index)

    - name: chargingDataUpdate
      request:
        method: POST
        path: "/nchf-convergedcharging/v2/chargingdata/${chargingDataRef}/update"
        headers: 
        - content-type: "application/json"
        body: |
          {
            "invocationSequenceNumber": ${COUNTER},
            "invocationTimeStamp": "${now}",
            "subscriberIdentifier": "imsi-${imsi}",
            "nfConsumerIdentification": {
              "nFIPv6Address": "2001:db8:85a3::8a2e:370:7334",
              "nFIPv4Address": "198.51.100.1",
              "nFName": "046b6c7f-0b8a-43b9-b35d-6489e6daee91",
              "nodeFunctionality": "SMF",
              "nFPLMNID": {
                "mnc": "${random}",
                "mcc": "${random}"
              }
            }
          }
        timeout: 3s
      response:
        assert:
          status: 200
      post-script:
        scripts: |
          def COUNTER = COUNTER + 1

    - name: chargingDataRelease
      request:
        method: POST
        path: "/nchf-convergedcharging/v2/chargingdata/${chargingDataRef}/release"
        headers: 
        - content-type: "application/json"
        body: |
          {
            "invocationSequenceNumber": ${COUNTER},
            "invocationTimeStamp": "${now}",
            "subscriberIdentifier": "imsi-${imsi}",
            "nfConsumerIdentification": {
              "nFIPv6Address": "2001:db8:85a3::8a2e:370:7334",
              "nFIPv4Address": "198.51.100.1",
              "nFName": "046b6c7f-0b8a-43b9-b35d-6489e6daee91",
              "nodeFunctionality": "SMF",
              "nFPLMNID": {
                "mnc": "${random}",
                "mcc": "${random}"
              }
            }
          }
        timeout: 3s
      response:
        assert:
          status: 204
      post-script:
        scripts: |
          def COUNTER = COUNTER + 1
